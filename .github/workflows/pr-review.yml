name: Amazon Q PR Review and Auto-merge

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  amazon-q-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            **/*.js
            **/*.json
            **/*.md
            **/*.yml
            **/*.yaml
            **/*.sql

      - name: Amazon Q Code Review
        id: q-review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            // Get changed files content
            const changedFiles = '${{ steps.changed-files.outputs.all_changed_files }}'.split(' ');
            let reviewComments = [];
            let hasIssues = false;

            for (const file of changedFiles) {
              if (!file) continue;
              
              try {
                const content = fs.readFileSync(file, 'utf8');
                
                // Amazon Q-style code review checks
                const issues = performCodeReview(content, file);
                
                if (issues.length > 0) {
                  hasIssues = true;
                  reviewComments.push({
                    path: file,
                    issues: issues
                  });
                }
              } catch (error) {
                console.log(`Could not read file: ${file}`);
              }
            }

            // Amazon Q review logic
            function performCodeReview(content, filename) {
              const issues = [];
              
              // Security checks
              if (content.includes('password') && content.includes('=') && !content.includes('process.env')) {
                issues.push({
                  type: 'SECURITY',
                  message: 'Hardcoded password detected. Use environment variables instead.',
                  severity: 'HIGH'
                });
              }
              
              if (content.includes('console.log') && filename.includes('service')) {
                issues.push({
                  type: 'LOGGING',
                  message: 'Use proper logging framework instead of console.log in production services.',
                  severity: 'MEDIUM'
                });
              }

              // Code quality checks
              if (content.includes('var ') && filename.endsWith('.js')) {
                issues.push({
                  type: 'CODE_QUALITY',
                  message: 'Use const/let instead of var for better scoping.',
                  severity: 'LOW'
                });
              }

              if (content.includes('== ') || content.includes('!= ')) {
                issues.push({
                  type: 'CODE_QUALITY',
                  message: 'Use strict equality (=== or !==) instead of loose equality.',
                  severity: 'MEDIUM'
                });
              }

              // SQL injection checks
              if (content.includes('SELECT') && content.includes('+') && filename.endsWith('.js')) {
                issues.push({
                  type: 'SECURITY',
                  message: 'Potential SQL injection vulnerability. Use parameterized queries.',
                  severity: 'HIGH'
                });
              }

              // Missing error handling
              if (content.includes('await ') && !content.includes('try') && filename.endsWith('.js')) {
                issues.push({
                  type: 'ERROR_HANDLING',
                  message: 'Missing error handling for async operations.',
                  severity: 'MEDIUM'
                });
              }

              return issues;
            }

            // Create review comment
            let reviewBody = "## ü§ñ Amazon Q Developer Code Review\n\n";
            
            if (hasIssues) {
              reviewBody += "‚ùå **Issues Found** - This PR requires changes before merging.\n\n";
              
              for (const fileReview of reviewComments) {
                reviewBody += `### üìÅ ${fileReview.path}\n`;
                for (const issue of fileReview.issues) {
                  const emoji = issue.severity === 'HIGH' ? 'üî¥' : issue.severity === 'MEDIUM' ? 'üü°' : 'üü¢';
                  reviewBody += `${emoji} **${issue.type}** (${issue.severity}): ${issue.message}\n`;
                }
                reviewBody += "\n";
              }
              
              reviewBody += "Please fix these issues and push new commits to update this PR.";
            } else {
              reviewBody += "‚úÖ **Code Review Passed** - No issues found. This PR is ready for merge!\n\n";
              reviewBody += "- Security checks: ‚úÖ Passed\n";
              reviewBody += "- Code quality: ‚úÖ Passed\n";
              reviewBody += "- Best practices: ‚úÖ Passed\n";
            }

            // Post review comment
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: reviewBody,
              event: hasIssues ? 'REQUEST_CHANGES' : 'APPROVE'
            });

            return { hasIssues, reviewComments };

      - name: Auto-merge if approved
        if: steps.q-review.outputs.hasIssues == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            // Auto-merge the PR if Amazon Q approved it
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                commit_title: `Auto-merge: ${context.payload.pull_request.title}`,
                commit_message: 'Automatically merged after Amazon Q Developer approval',
                merge_method: 'squash'
              });
              
              console.log('‚úÖ PR auto-merged successfully!');
            } catch (error) {
              console.log('‚ùå Auto-merge failed:', error.message);
            }

      - name: Block merge if issues found
        if: steps.q-review.outputs.hasIssues == 'true'
        run: |
          echo "‚ùå Amazon Q found issues in the code. Blocking merge until issues are resolved."
          exit 1
